package de.uni_leipzig.simba.memorymanagement.parallel.tests;

public class MatricesInitializer {

	public static double[][] getMatrix1()
	{
		double[][] matrix = {{0, 0, 15, 0, 1, 0, 0, 0, 0, 0, 0, 16, 0}, 
							{0, 0, 10, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0}, 
							{15, 10, 0, 6, 0, 13, 0, 0, 9, 0, 0, 0, 0}, 
							{0, 5, 6, 0, 1, 0, 0, 0, 6, 4, 0, 0, 0}, 
							{1, 0, 0, 1, 0, 17, 0, 17, 13, 0, 0, 0, 0}, 
							{0, 6, 13, 0, 17, 0, 12, 0, 20, 0, 0, 0, 0}, 
							{0, 0, 0, 0, 0, 12, 0, 0, 10, 0, 0, 0, 11}, 
							{0, 0, 0, 0, 17, 0, 0, 0, 11, 7, 0, 0, 0}, 
							{0, 0, 9, 6, 13, 20, 10, 11, 0, 0, 5, 0, 0}, 
							{0, 0, 0, 4, 0, 0, 0, 7, 0, 0, 0, 0, 0}, 
							{0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5}, 
							{16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
							{0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 5, 0, 0}};
		return matrix;
	}
	public static double[][] getMatrix2()
	{
		double[][] matrix = {{0.0,0.0,0.0,0.0,0.0,17.0,0.0,20.0,15.0},
				{0.0,0.0,2.0,1.0,15.0,10.0,0.0,0.0,0.0},
				{0.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				{0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				{0.0,15.0,0.0,0.0,0.0,0.0,9.0,0.0,0.0},
				{17.0,10.0,0.0,0.0,0.0,0.0,13.0,8.0,0.0},
				{0.0,0.0,0.0,0.0,9.0,13.0,0.0,0.0,0.0},
				{20.0,0.0,0.0,0.0,0.0,8.0,0.0,0.0,4.0},
				{15.0,0.0,0.0,0.0,0.0,0.0,0.0,4.0,0.0}};
		return matrix;
	}

	public static double[][] getMatrix3()
	{
		double[][] matrix = {{0.0,0.0,0.0,0.0,10.0,0.0,0.0,25.0,0.0,0.0,0.0,0.0,6.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,15.0,0.0,0.0,0.0,8.0,13.0,0.0,0.0,0.0,0.0},
				{0.0,0.0,0.0,0.0,0.0,0.0,0.0,9.0,11.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				{0.0,0.0,0.0,0.0,0.0,0.0,6.0,0.0,0.0,0.0,15.0,0.0,0.0,18.0,0.0,0.0,0.0,0.0,0.0,0.0},
				{10.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.0,0.0,0.0,6.0,0.0,0.0},
				{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,14.0,0.0,0.0,0.0,0.0,19.0,0.0,0.0,16.0,0.0,0.0,0.0},
				{0.0,0.0,0.0,6.0,0.0,0.0,0.0,12.0,0.0,0.0,0.0,0.0,0.0,4.0,0.0,0.0,0.0,0.0,0.0,0.0},
				{25.0,0.0,9.0,0.0,0.0,0.0,12.0,0.0,0.0,8.0,0.0,0.0,5.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				{0.0,0.0,11.0,0.0,0.0,14.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},
				{0.0,0.0,0.0,0.0,0.0,0.0,0.0,8.0,0.0,0.0,0.0,0.0,0.0,7.0,0.0,0.0,0.0,0.0,0.0,0.0},
				{0.0,15.0,0.0,15.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,7.0,0.0},
				{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,7.0,0.0,0.0,0.0,20.0},
				{6.0,0.0,0.0,0.0,0.0,0.0,0.0,5.0,0.0,0.0,0.0,0.0,0.0,0.0,21.0,0.0,0.0,3.0,0.0,0.0},
				{0.0,0.0,0.0,18.0,0.0,19.0,4.0,0.0,0.0,7.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19.0,0.0},
				{0.0,8.0,0.0,0.0,5.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,21.0,0.0,0.0,0.0,4.0,0.0,0.0,14.0},
				{0.0,13.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,7.0,0.0,0.0,0.0,0.0,0.0,0.0,3.0,0.0},
				{0.0,0.0,0.0,0.0,0.0,16.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,4.0,0.0,0.0,19.0,0.0,0.0},
				{0.0,0.0,0.0,0.0,6.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.0,0.0,0.0,0.0,19.0,0.0,0.0,3.0},
				{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,7.0,0.0,0.0,19.0,0.0,3.0,0.0,0.0,0.0,1.0},
				{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,20.0,0.0,0.0,14.0,0.0,0.0,3.0,1.0,0.0}};
		return matrix;
	}
	public static double[][] getMatrix4()
	{
		double[][] matrix = {{0.0,0.0,5.0,0.0,0.0,0.0,0.0},
				{0.0,0.0,10.0,0.0,0.0,4.0,0.0},
				{5.0,10.0,0.0,8.0,7.0,0.0,0.0},
				{0.0,0.0,8.0,0.0,2.0,7.0,0.0},
				{0.0,0.0,7.0,2.0,0.0,4.0,0.0},
				{0.0,4.0,0.0,7.0,4.0,0.0,1.0},
				{0.0,0.0,0.0,0.0,0.0,1.0,0.0}};
		return matrix;
	}
	
	public static double[][] getMatrix5()
	{
		double[][] matrix = {{0, 0, 13, 0, 0, 8, 16, 0, 0, 0}, 
				{0, 0, 0, 0, 19, 0, 0, 0, 0, 0}, 
				{13, 0, 0, 0, 0, 9, 0, 0, 0, 0}, 
				{0, 0, 0, 0, 0, 9, 13, 9, 0, 0}, 
				{0, 19, 0, 0, 0, 0, 20, 0, 0, 0}, 
				{8, 0, 9, 9, 0, 0, 9, 0, 0, 0}, 
				{16, 0, 0, 13, 20, 9, 0, 0, 18, 15}, 
				{0, 0, 0, 9, 0, 0, 0, 0, 0, 10}, 
				{0, 0, 0, 0, 0, 0, 18, 0, 0, 0}, 
				{0, 0, 0, 0, 0, 0, 15, 10, 0, 0}};
		return matrix;
	}
	
	
	public static double[][] getMatrix6()
	{
		double[][] matrix = {{0, 19, 0, 3, 0, 0, 0, 0, 0, 0, 0}, 
				{19, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0}, 
				{0, 11, 0, 8, 0, 0, 0, 0, 3, 0, 0}, 
				{3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0}, 
				{0, 0, 0, 0, 0, 5, 7, 10, 0, 0, 0}, 
				{0, 0, 0, 0, 5, 0, 6, 7, 0, 0, 0}, 
				{0, 0, 0, 0, 7, 6, 0, 12, 0, 0, 0}, 
				{0, 0, 0, 0, 10, 7, 12, 0, 12, 0, 0}, 
				{0, 0, 3, 0, 0, 0, 0, 12, 0, 12, 6}, 
				{0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0}, 
				{0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0}};
		return matrix;
	}
	
	public static double[][] getMatrix7()
	{
		double[][] matrix = {{0, 7, 11, 5, 1, 4}, 
				{7, 0, 11, 5, 5, 6}, 
				{11, 11, 0, 4, 10, 13}, 
				{5, 5, 4, 0, 1, 8}, 
				{1, 5, 10, 1, 0, 11}, 
				{4, 6, 13, 8, 11, 0}};
		return matrix;
	}
	public static double[][] getMatrix8()
	{
		double[][] matrix = {{0, 19, 0, 3, 0, 0, 0}, 
							{19, 0, 11, 0, 0, 0, 0}, 
							{0, 11, 0, 8, 3, 0, 0}, 
							{3, 0, 8, 0, 0, 0, 0}, 
							{0, 0, 3, 0, 0, 12, 0}, 
							{0, 0, 0, 0, 12, 0, 10}, 
							{0, 0, 0, 0, 0, 10, 0}};
		return matrix;
	}
	public static double[][] getMatrix9()//twist change on 8 for node 4
	{
		double[][] matrix = {{0, 19, 0, 3, 0, 0, 0, 0},
				{19, 0, 11, 0, 0, 0, 0, 0}, 
				{0, 11, 0, 8, 3, 0, 0, 0}, 
				{3, 0, 8, 0, 0, 0, 0, 0}, 
				{0, 0, 3, 0, 0, 12, 0, 11}, 
				{0, 0, 0, 0, 12, 0, 10, 0}, 
				{0, 0, 0, 0, 0, 10, 0, 0}, 
				{0, 0, 0, 0, 11, 0, 0, 0}};
		return matrix;
	}

	private static void printMatrix(double[][] matrix)
	{
		int size = matrix[0].length;
		for(int i=0;i<size;i++)
		{
			for(int j=0;j<size;j++)
				System.out.print(matrix[i][j]+"\t");
			System.out.println();
		}
	}
	private static void drawMatrix(double[][] matrix)
	{
		int size = matrix[0].length;
		for(int i=0;i<size;i++)
		{
			for(int j=i;j<size;j++)
				if(matrix[i][j]> 0)
					System.out.println(i+"---"+j+"---"+matrix[i][j]);
		}
	}
	
	public static double[][] getMatrix(int choice)
	{
		double[][] matrix = null;
		switch(choice)
		{
		case 1 : matrix = getMatrix1();
		break;
		
		case 2 : matrix = getMatrix2();
		break;
		case 3 : matrix = getMatrix3();
		break;
		case 4 : matrix = getMatrix4();
		break;
		
		case 5 : matrix = getMatrix5();
		break;
		
		case 6 : matrix = getMatrix6();
		break;
		
		case 7 : matrix = getMatrix7();
		break;
		
		case 8 : matrix = getMatrix8();
		break;
		
		case 9 : matrix = getMatrix9();
		break;
		
		}
		
		return matrix;
	}

	public static void main(String[] args)
	{
		int choice = 3;
		double[][] matrix = getMatrix(3);
		printMatrix(matrix);
		drawMatrix(matrix);
	}

}


